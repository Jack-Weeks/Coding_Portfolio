import numpy as np
import PIL
import os.path
import glob
from funcsForCoursework import read_file
import pandas as pd
import pingouin as pg
from icc import icc
#Initiate File Directories
GMM_Dir = 'GMM/'
MA_Dir = 'MA/'
#Initiate space for data to be stored
patients = []
class1_surface_area = np.zeros((10,4))
class2_surface_area = np.zeros((10,4))
class3_surface_area = np.zeros((10,4))
class4_surface_area = np.zeros((10,4))
surface_areas = np.zeros((40, 4))

for i in range (11,21) :#For images 11 - 20
    GMM_Files = (glob.glob(GMM_Dir + '*_'+ str(i) + '_*'))
    MA_Files = (glob.glob(MA_Dir + '*_'+ str(i) + '_*'))
    patients.append(GMM_Files + MA_Files)
for j, patient in enumerate(patients): #Iterate 0 - 9
    for i in range(len(patient)): #Iterate over each file name
        img = np.nan_to_num(read_file(patient[i]), nan=0)
        Surface_area = np.count_nonzero(img)
        if patient[i].endswith('MA_seg1.png') and '_v1_' in patient[i]:
            class1_surface_area[j][0] = Surface_area
        if patient[i].endswith('MA_seg1.png') and '_v2_' in patient[i]:
            class1_surface_area[j][1] = Surface_area
        if patient[i].endswith('GMM_seg1.png') and '_v1_' in patient[i]:
            class1_surface_area[j][2] = Surface_area
        if patient[i].endswith('GMM_seg1.png') and '_v2_' in patient[i]:
            class1_surface_area[j][3] = Surface_area

        if patient[i].endswith('MA_seg2.png') and '_v1_' in patient[i]:
            class2_surface_area[j][0] = Surface_area
        if patient[i].endswith('MA_seg2.png') and '_v2_' in patient[i]:
            class2_surface_area[j][1] = Surface_area
        if patient[i].endswith('GMM_seg2.png') and '_v1_' in patient[i]:
            class2_surface_area[j][2] = Surface_area
        if patient[i].endswith('GMM_seg2.png') and '_v2_' in patient[i]:
            class2_surface_area[j][3] = Surface_area

        if patient[i].endswith('MA_seg3.png') and '_v1_' in patient[i]:
            class3_surface_area[j][0] = Surface_area
        if patient[i].endswith('MA_seg3.png') and '_v2_' in patient[i]:
            class3_surface_area[j][1] = Surface_area
        if patient[i].endswith('GMM_seg3.png') and '_v1_' in patient[i]:
            class3_surface_area[j][2] = Surface_area
        if patient[i].endswith('GMM_seg3.png') and '_v2_' in patient[i]:
            class3_surface_area[j][3] = Surface_area

        if patient[i].endswith('MA_seg4.png') and '_v1_' in patient[i]:
            class4_surface_area[j][0] = 42720- Surface_area
        if patient[i].endswith('MA_seg4.png') and '_v2_' in patient[i]:
            class4_surface_area[j][1] = 42720 - Surface_area
        if patient[i].endswith('GMM_seg4.png') and '_v1_' in patient[i]:
            class4_surface_area[j][2] = 42720- Surface_area
        if patient[i].endswith('GMM_seg4.png') and '_v2_' in patient[i]:
            class4_surface_area[j][3] = 42720 - Surface_area
        else:
            pass
# Convert to dataframe for ease of reading
Class1 = pd.DataFrame(class1_surface_area)
Class1.columns = ["MA_Scan1","MA_Scan2","GMM_Scan1","GMM_Scan2"]
#calculate ICC(2,1) using imported ICC function
class1icc = icc(class1_surface_area, model='twoway', type='agreement', unit='single', confidence_level=0.95)
class2icc = icc(class2_surface_area, model='twoway', type='agreement', unit='single', confidence_level=0.95)
class3icc = icc(class3_surface_area, model='twoway', type='agreement', unit='single', confidence_level=0.95)

#Print and save results

print('Segmentation 1 Has ICC coefficient', class1icc[0], 'and confidence bounds (lower,upper)', class1icc[5], class1icc[6])
print('Segmentation 2 Has ICC coefficient', class2icc[0], 'and confidence bounds (lower,upper)', class2icc[5], class2icc[6])
print('Segmentation 3 Has ICC coefficient', class3icc[0], 'and confidence bounds (lower,upper)', class3icc[5], class3icc[6])


Class1 = pd.DataFrame(class1_surface_area)
Class1.columns = ["MA_Scan1_mm**2 ","MA_Scan2_ mm**2","GMM_Scan1_ mm**2","GMM_Scan2_mm**2"]
Class1.to_csv('Output_CSV/Class1.csv')
Class2 = pd.DataFrame(class2_surface_area)
Class2.columns = ["MA_Scan1_mm**2 ","MA_Scan2_ mm**2","GMM_Scan1_ mm**2","GMM_Scan2_mm**2"]
Class2.to_csv('Output_CSV/Class2.csv')
Class3 = pd.DataFrame(class3_surface_area)
Class3.columns = ["MA_Scan1_mm**2 ","MA_Scan2_ mm**2","GMM_Scan1_ mm**2","GMM_Scan2_mm**2"]
Class3.to_csv('Output_CSV/Class3.csv')


